{"version":3,"file":"analyzer.js","sourceRoot":"","sources":["../../src/analyzer.ts"],"names":[],"mappings":";;AACA,mCAAwC;AAgExC,MAAM,kBAAkB,GAAG,IAAI,CAAC;AAChC,MAAa,cAAc;IAMzB,YAAY,UAAsB,EAAE,IAAY;QAHhD,qBAAgB,GAAG,IAAI,CAAC;QAItB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAED,GAAG;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAC7B,EAAE,IAAI,EAAE,kBAAkB,IAAI,CAAC,IAAI,EAAE,EAAE,EACvC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAChB,CAAC;IACJ,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CACpB,GAAG,EAAE,CAAC,IAAI,EACV,GAAG,CAAC,EAAE;YACJ,IAAI,qBAAa,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,QAAQ,KAAK,kBAAkB,EAAE;gBAC7D,OAAO,KAAK,CAAC;aACd;YACD,MAAM,GAAG,CAAC;QACZ,CAAC,CACF,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,OAA8B;QACnC,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAC7B;YACE,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,gBAAgB;YACtB,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,GAAG,OAAO,EAAE;SACtC,EACD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAChB,CAAC;IACJ,CAAC;IAED,IAAI,CAAC,KAAe;QAClB,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAC7B;YACE,MAAM,EAAE,QAAQ;YAChB,IAAI,EAAE,kBAAkB,IAAI,CAAC,IAAI,EAAE;YACnC,EAAE,EAAE,EAAE,KAAK,EAAE;SACd,EACD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAChB,CAAC;IACJ,CAAC;CACF;AAnDD,wCAmDC","sourcesContent":["import { Connection } from \"./connection\";\nimport { isArangoError } from \"./error\";\n\nexport type AnalyzerDescription = AnyAnalyzer & {\n  name: string;\n  features: string[];\n};\n\nexport type CreateAnalyzerOptions = AnyAnalyzer & {\n  features?: string[];\n};\n\nexport type AnyAnalyzer =\n  | IdentityAnalyzer\n  | DelimiterAnalyzer\n  | StemAnalyzer\n  | NormAnalyzer\n  | NgramAnalyzer\n  | TextAnalyzer;\n\nexport interface IdentityAnalyzer {\n  type: \"identity\";\n  properties?: null;\n}\n\nexport interface DelimiterAnalyzer {\n  type: \"delimiter\";\n  properties: string | { delimiter: string };\n}\n\nexport interface StemAnalyzer {\n  type: \"stem\";\n  properties: { locale: string };\n}\n\nexport interface NormAnalyzer {\n  type: \"norm\";\n  properties: {\n    locale: string;\n    case?: \"lower\" | \"none\" | \"upper\";\n    accent?: boolean;\n  };\n}\n\nexport interface NgramAnalyzer {\n  type: \"ngram\";\n  properties: {\n    max: number;\n    min: number;\n    preserveOriginal: boolean;\n  };\n}\n\nexport interface TextAnalyzer {\n  type: \"text\";\n  properties: {\n    locale: string;\n    case?: \"lower\" | \"none\" | \"upper\";\n    stopwords?: string[];\n    stopwordsPath?: string;\n    accent?: boolean;\n    stemming?: boolean;\n  };\n}\n\nconst ANALYZER_NOT_FOUND = 1202;\nexport class ArangoAnalyzer {\n  private _connection: Connection;\n\n  isArangoAnalyzer = true;\n  name: string;\n\n  constructor(connection: Connection, name: string) {\n    this._connection = connection;\n    this.name = name;\n  }\n\n  get(): Promise<AnalyzerDescription> {\n    return this._connection.request(\n      { path: `/_api/analyzer/${this.name}` },\n      res => res.body\n    );\n  }\n\n  exists() {\n    return this.get().then(\n      () => true,\n      err => {\n        if (isArangoError(err) && err.errorNum === ANALYZER_NOT_FOUND) {\n          return false;\n        }\n        throw err;\n      }\n    );\n  }\n\n  create(options: CreateAnalyzerOptions): Promise<AnalyzerDescription> {\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/_api/analyzer\",\n        body: { name: this.name, ...options }\n      },\n      res => res.body\n    );\n  }\n\n  drop(force?: boolean): Promise<{ name: string }> {\n    return this._connection.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/analyzer/${this.name}`,\n        qs: { force }\n      },\n      res => res.body\n    );\n  }\n}\n"]}