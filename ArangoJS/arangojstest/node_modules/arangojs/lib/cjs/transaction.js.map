{"version":3,"file":"transaction.js","sourceRoot":"","sources":["../../src/transaction.ts"],"names":[],"mappings":";;AACA,mCAAwC;AAOxC,MAAM,qBAAqB,GAAG,EAAE,CAAC;AACjC,MAAa,iBAAiB;IAK5B,YAAY,UAAsB,EAAE,EAAU;QAJ9C,wBAAmB,GAAS,IAAI,CAAC;QAK/B,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;IACf,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CACpB,GAAG,EAAE,CAAC,IAAI,EACV,GAAG,CAAC,EAAE;YACJ,IAAI,qBAAa,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,QAAQ,KAAK,qBAAqB,EAAE;gBAChE,OAAO,KAAK,CAAC;aACd;YACD,MAAM,GAAG,CAAC;QACZ,CAAC,CACF,CAAC;IACJ,CAAC;IAED,GAAG;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAC7B;YACE,IAAI,EAAE,qBAAqB,IAAI,CAAC,EAAE,EAAE;SACrC,EACD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CACvB,CAAC;IACJ,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAC7B;YACE,MAAM,EAAE,KAAK;YACb,IAAI,EAAE,qBAAqB,IAAI,CAAC,EAAE,EAAE;SACrC,EACD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CACvB,CAAC;IACJ,CAAC;IAED,KAAK;QACH,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAC7B;YACE,MAAM,EAAE,QAAQ;YAChB,IAAI,EAAE,qBAAqB,IAAI,CAAC,EAAE,EAAE;SACrC,EACD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CACvB,CAAC;IACJ,CAAC;IAED,GAAG,CAAI,EAAoB;QACzB,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC3C,IAAI;YACF,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;SAC9B;gBAAS;YACR,IAAI,CAAC,WAAW,CAAC,kBAAkB,EAAE,CAAC;SACvC;IACH,CAAC;CACF;AA3DD,8CA2DC","sourcesContent":["import { Connection } from \"./connection\";\nimport { isArangoError } from \"./error\";\n\ninterface TransactionStatus {\n  id: string;\n  status: \"running\" | \"committed\" | \"aborted\";\n}\n\nconst TRANSACTION_NOT_FOUND = 10;\nexport class ArangoTransaction {\n  isArangoTransaction: true = true;\n  private _connection: Connection;\n  id: string;\n\n  constructor(connection: Connection, id: string) {\n    this._connection = connection;\n    this.id = id;\n  }\n\n  exists(): Promise<boolean> {\n    return this.get().then(\n      () => true,\n      err => {\n        if (isArangoError(err) && err.errorNum === TRANSACTION_NOT_FOUND) {\n          return false;\n        }\n        throw err;\n      }\n    );\n  }\n\n  get(): Promise<TransactionStatus> {\n    return this._connection.request(\n      {\n        path: `/_api/transaction/${this.id}`\n      },\n      res => res.body.result\n    );\n  }\n\n  commit(): Promise<TransactionStatus> {\n    return this._connection.request(\n      {\n        method: \"PUT\",\n        path: `/_api/transaction/${this.id}`\n      },\n      res => res.body.result\n    );\n  }\n\n  abort(): Promise<TransactionStatus> {\n    return this._connection.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/transaction/${this.id}`\n      },\n      res => res.body.result\n    );\n  }\n\n  run<T>(fn: () => Promise<T>): Promise<T> {\n    this._connection.setTransactionId(this.id);\n    try {\n      return Promise.resolve(fn());\n    } finally {\n      this._connection.clearTransactionId();\n    }\n  }\n}\n"]}